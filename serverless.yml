service: metadocs

provider:
  name: aws
  runtime: python3.11
  region: eu-central-1
  stage: ${opt:stage, 'dev'}  # Default to 'dev' if not provided
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-users
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-domains
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-domains/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-domain-memberships
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-domain-memberships/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-invitations
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-invitations/index/*

plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  dotenv:
    path: .env
  pythonRequirements:
    dockerizePip: true
    usePoetry: true
    # noDeploy:
    #   - boto3
    #   - botocore
  frontendBucketName: ${self:provider.stage}-metadocs-frontend
  domainName: ${self:custom.domainNames.${self:provider.stage}, '${self:provider.stage}.app.metadocs.co'}
  domainNames:
    prod: app.metadocs.co
  cloudFrontDistributionIds:
    dev: "E3CIV0VN5IVHON"
    prod: "YOUR_PROD_CLOUDFRONT_DISTRIBUTION_ID"

package:
  exclude:
    - frontend/**
    - node_modules/**
    - .git/**
    - .vscode/**
    - tests/**
    - README.md
    - .env

  include:
    - backend/**

functions:
  backend:
    handler: backend/src/main.handler
    events:
      - http:  # For local development with serverless-offline
          path: api/{proxy+}
          method: ANY
          cors: true
    environment:
      BUCKET_NAME: ${self:custom.frontendBucketName}
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
      API_AUDIENCE: ${env:API_AUDIENCE}
      USERS_TABLE: ${self:provider.stage}-users
      DOMAINS_TABLE: ${self:provider.stage}-domains
      DOMAIN_MEMBERSHIPS_TABLE: ${self:provider.stage}-domain-memberships
      INVITATIONS_TABLE: ${self:provider.stage}-invitations

resources:
  Resources:
    BackendLambdaPermission:
      Type: AWS::Lambda::Url
      Properties:
        TargetFunctionArn: !GetAtt BackendLambdaFunction.Arn
        AuthType: NONE  # No authentication (public URL)

    S3BucketFrontend:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: "${self:provider.stage}-metadocs-OAC"
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt S3BucketFrontend.DomainName
              Id: S3Origin
              OriginAccessControlId: !Ref CloudFrontOriginAccessControl  # Correct property for OAC
              S3OriginConfig: {}  # Keep this empty when using OAC
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:514170698941:certificate/62e81c17-bebd-414e-bc9a-9e88828bd697
            SslSupportMethod: sni-only
          Aliases:
            - ${self:custom.domainName}

    # Attach the bucket policy to restrict access to CloudFront only
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3BucketFrontend
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:custom.frontendBucketName}/*"
              Condition:
                StringEquals:
                  AWS:SourceArn: "arn:aws:cloudfront::${AWS::AccountId}:distribution/${self:custom.cloudFrontDistributionIds.${self:provider.stage}}"

    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    DomainsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-domains
        AttributeDefinitions:
          - AttributeName: DomainId
            AttributeType: S
          - AttributeName: OwnerUserId
            AttributeType: S
        KeySchema:
          - AttributeName: DomainId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: OwnerUserIdIndex
            KeySchema:
              - AttributeName: OwnerUserId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    DomainMembershipsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-domain-memberships
        AttributeDefinitions:
          - AttributeName: DomainId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: DomainId
            KeyType: HASH
          - AttributeName: UserId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: UserId
                KeyType: HASH
              - AttributeName: DomainId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    InvitationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-invitations
        AttributeDefinitions:
          - AttributeName: InvitationId
            AttributeType: S
          - AttributeName: InviteeEmail
            AttributeType: S
        KeySchema:
          - AttributeName: InvitationId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: InviteeEmailIndex
            KeySchema:
              - AttributeName: InviteeEmail
                KeyType: HASH
            Projection:
              ProjectionType: ALL

  Outputs:
    S3BucketFrontend:
      Value: !Ref S3BucketFrontend
      Export:
        Name: ${self:service}-${self:provider.stage}-frontend-bucket

    UsersTableName:
      Value: !Ref UsersTable
      Export:
        Name: ${self:service}-${self:provider.stage}-users

    DomainsTableName:
      Value: !Ref DomainsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-domains

    DomainMembershipsTableName:
      Value: !Ref DomainMembershipsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-domain-memberships

    InvitationsTableName:
      Value: !Ref InvitationsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-invitations
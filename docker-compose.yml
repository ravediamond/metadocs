version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: sh -c "./create_tables.sh && poetry run uvicorn src.main:app --host 0.0.0.0 --port 8080 --reload"
    volumes:
      - ./backend:/app
      - ~/.aws:/app/.aws:ro
    environment:
      - POSTGRES_DB=db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=adminpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - SECRET_KEY=${SECRET_KEY}
      - WATCHFILES_FORCE_POLLING=true
      - AWS_SHARED_CREDENTIALS_FILE=/app/.aws/credentials
      - AWS_CONFIG_FILE=/app/.aws/config
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - backend-network
    mem_limit: 2g
    mem_reservation: 1g
    cpus: 2

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}
    env_file:
      - .env
    networks:
      - backend-network
    mem_limit: 4g
    mem_reservation: 2g
    cpus: 1

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpassword
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    mem_limit: 1g
    mem_reservation: 512m
    cpus: 1
    # postgres-specific optimizations
    command: 
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "work_mem=16MB"

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  backend-network:
    driver: bridge